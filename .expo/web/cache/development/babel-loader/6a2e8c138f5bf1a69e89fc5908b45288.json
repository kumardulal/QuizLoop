{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { makeAutoObservable } from \"mobx\";\nimport questionsList from \"../models/questionsList\";\nexport var QuizStore = function () {\n  function QuizStore(rootStore, questionStore) {\n    _classCallCheck(this, QuizStore);\n\n    this.currentSelection = '';\n    this.currentQuestion = null;\n    this.showAnswer = false;\n    makeAutoObservable(this);\n    state = {\n      cart: [],\n      total: 0\n    };\n    this.rootStore = rootStore;\n    this.questionStore = questionStore;\n    this.currentQuestion = questionStore.getRandomQuestion();\n  }\n\n  _createClass(QuizStore, [{\n    key: \"changeSelection\",\n    value: function changeSelection(selection) {\n      console.log(selection);\n      console.log(this.currentSelection);\n      this.currentSelection = selection;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(selection) {\n      return this.currentSelection == selection;\n    }\n  }, {\n    key: \"submitAnswer\",\n    value: function submitAnswer() {\n      console.log('submit');\n      var Answers = [1, 2, 1, 3, 3];\n      questionsList.map(function (val, index) {\n        console.log(\"This is it\", val.answer);\n      });\n      this.showAnswer = true;\n    }\n  }, {\n    key: \"isOptionCorrect\",\n    value: function isOptionCorrect(option) {\n      return this.currentQuestion.answer == option;\n    }\n  }]);\n\n  return QuizStore;\n}();","map":{"version":3,"sources":["C:/Users/New  Leaders Tech/Desktop/kumar-final-master/src/stores/quizStore.js"],"names":["makeAutoObservable","questionsList","QuizStore","rootStore","questionStore","currentSelection","currentQuestion","showAnswer","state","cart","total","getRandomQuestion","selection","console","log","Answers","map","val","index","answer","option"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,OAAOC,aAAP;AAEA,WAAaC,SAAb;AAMI,qBAAYC,SAAZ,EAAuBC,aAAvB,EAAsC;AAAA;;AAAA,SAJtCC,gBAIsC,GAJnB,EAImB;AAAA,SAHtCC,eAGsC,GAHpB,IAGoB;AAAA,SAFtCC,UAEsC,GAFzB,KAEyB;AAClCP,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAQ,IAAAA,KAAK,GAAG;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,KAAK,EAAE;AAFH,KAAR;AAIA,SAAKP,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,eAAL,GAAuBF,aAAa,CAACO,iBAAd,EAAvB;AACH;;AAfL;AAAA;AAAA,WAiBI,yBAAgBC,SAAhB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,gBAAjB;AACA,WAAKA,gBAAL,GAAwBO,SAAxB;AACH;AArBL;AAAA;AAAA,WAuBI,oBAAWA,SAAX,EAAsB;AAClB,aAAO,KAAKP,gBAAL,IAAyBO,SAAhC;AACH;AAzBL;AAAA;AAAA,WA2BI,wBAAe;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB;AACAd,MAAAA,aAAa,CAACe,GAAd,CAAkB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC9BL,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BG,GAAG,CAACE,MAA9B;AAEH,OAHD;AAKA,WAAKZ,UAAL,GAAkB,IAAlB;AAIH;AAvCL;AAAA;AAAA,WAyCI,yBAAgBa,MAAhB,EAAwB;AACpB,aAAO,KAAKd,eAAL,CAAqBa,MAArB,IAA+BC,MAAtC;AACH;AA3CL;;AAAA;AAAA","sourcesContent":["import { makeAutoObservable } from \"mobx\"\nimport questionsList from \"../models/questionsList\";\n\nexport class QuizStore {\n    questionStore;\n    currentSelection = '';\n    currentQuestion = null;\n    showAnswer = false;\n\n    constructor(rootStore, questionStore) {\n        makeAutoObservable(this);\n        state = {\n            cart: [],\n            total: 0\n          }\n        this.rootStore = rootStore;\n        this.questionStore = questionStore;\n        this.currentQuestion = questionStore.getRandomQuestion();\n    }\n\n    changeSelection(selection) {\n        console.log(selection)\n        console.log(this.currentSelection)\n        this.currentSelection = selection\n    }\n\n    isSelected(selection) {\n        return this.currentSelection == selection\n    }\n\n    submitAnswer() {\n        console.log('submit');\n        const Answers = [1, 2, 1, 3, 3]\n        questionsList.map((val, index) => {\n            console.log(\"This is it\", val.answer)\n\n        })\n\n        this.showAnswer = true;\n        // setTimeout(() => {\n        //     location.reload();\n        // }, 2000);\n    }\n\n    isOptionCorrect(option) {\n        return this.currentQuestion.answer == option\n    }\n\n}"]},"metadata":{},"sourceType":"module"}