{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { makeAutoObservable } from 'mobx';\nimport { Question } from \"../models/question\";\nimport questionsList from \"../models/questionsList\";\nexport var QuestionStore = function () {\n  function QuestionStore(rootStore) {\n    _classCallCheck(this, QuestionStore);\n\n    this.questions = [];\n    makeAutoObservable(this, {\n      getRandomQuestion: false\n    });\n    this.rootStore = rootStore;\n    this.loadQuestions();\n  }\n\n  _createClass(QuestionStore, [{\n    key: \"loadQuestions\",\n    value: function loadQuestions() {\n      var _this = this;\n\n      console.log('Loading questions...');\n      questionsList.forEach(function (questionData) {\n        var question = new Question(_this);\n        question.updateFromMap(questionData);\n\n        _this.questions.push(question);\n      });\n      console.log(this.questions.length + ' questions loaded.');\n    }\n  }, {\n    key: \"getRandomQuestion\",\n    value: function getRandomQuestion() {\n      var questionIndex = Math.floor(Math.random() * this.questions.length);\n      return this.questions[questionIndex];\n    }\n  }]);\n\n  return QuestionStore;\n}();","map":{"version":3,"sources":["C:/Users/New  Leaders Tech/Desktop/kumar-final-master/src/stores/questionStore.js"],"names":["makeAutoObservable","Question","questionsList","QuestionStore","rootStore","questions","getRandomQuestion","loadQuestions","console","log","forEach","questionData","question","updateFromMap","push","length","questionIndex","Math","floor","random"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,QAAT;AACA,OAAOC,aAAP;AAEA,WAAaC,aAAb;AAGI,yBAAYC,SAAZ,EAAuB;AAAA;;AAAA,SAFvBC,SAEuB,GAFX,EAEW;AACnBL,IAAAA,kBAAkB,CAAC,IAAD,EAAO;AACrBM,MAAAA,iBAAiB,EAAE;AADE,KAAP,CAAlB;AAGA,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKG,aAAL;AACH;;AATL;AAAA;AAAA,WAWI,yBAAgB;AAAA;;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAEAP,MAAAA,aAAa,CAACQ,OAAd,CAAsB,UAACC,YAAD,EAAkB;AACpC,YAAIC,QAAQ,GAAG,IAAIX,QAAJ,CAAa,KAAb,CAAf;AACAW,QAAAA,QAAQ,CAACC,aAAT,CAAuBF,YAAvB;;AACA,QAAA,KAAI,CAACN,SAAL,CAAeS,IAAf,CAAoBF,QAApB;AACH,OAJD;AAMAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,SAAL,CAAeU,MAAf,GAAwB,oBAApC;AACH;AArBL;AAAA;AAAA,WAuBI,6BAAoB;AAChB,UAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAKd,SAAL,CAAeU,MAA1C,CAAtB;AACA,aAAO,KAAKV,SAAL,CAAeW,aAAf,CAAP;AACH;AA1BL;;AAAA;AAAA","sourcesContent":["import { makeAutoObservable } from 'mobx'\nimport { Question } from '../models/question';\nimport questionsList from '../models/questionsList';\n\nexport class QuestionStore {\n    questions = [];\n\n    constructor(rootStore) {\n        makeAutoObservable(this, {\n            getRandomQuestion: false\n        });\n        this.rootStore = rootStore;\n        this.loadQuestions();\n    }\n\n    loadQuestions() {\n        console.log('Loading questions...');\n\n        questionsList.forEach((questionData) => {\n            var question = new Question(this);\n            question.updateFromMap(questionData);\n            this.questions.push(question);\n        });\n\n        console.log(this.questions.length + ' questions loaded.');\n    }\n\n    getRandomQuestion() {\n        const questionIndex = Math.floor(Math.random() * this.questions.length);\n        return this.questions[questionIndex];\n    }\n}"]},"metadata":{},"sourceType":"module"}