{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { makeAutoObservable } from \"mobx\";\nimport questionsList from \"../models/questionsList\";\nexport var QuizStore = function () {\n  function QuizStore(rootStore, questionStore) {\n    _classCallCheck(this, QuizStore);\n\n    this.currentSelection = '';\n    this.currentQuestion = null;\n    this.showAnswer = false;\n    this.state = {\n      selectedanswer: \"\"\n    };\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n    this.questionStore = questionStore;\n    this.currentQuestion = questionStore.getRandomQuestion();\n  }\n\n  _createClass(QuizStore, [{\n    key: \"changeSelection\",\n    value: function changeSelection(selection) {\n      console.log(selection);\n      console.log(this.currentSelection);\n      this.currentSelection = selection;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(selection) {\n      return this.currentSelection == selection;\n    }\n  }, {\n    key: \"submitAnswer\",\n    value: function submitAnswer() {\n      console.log('submit');\n      var Answers = [1, 2, 1, 3, 3];\n      questionsList.map(function (val, i) {\n        Answers.map(function (dd, index) {\n          if (val.answer.length === dd[index]) {\n            console.log(dd[index]);\n          }\n        });\n      });\n      this.showAnswer = true;\n    }\n  }, {\n    key: \"isOptionCorrect\",\n    value: function isOptionCorrect(option) {\n      return this.currentQuestion.answer == option;\n    }\n  }]);\n\n  return QuizStore;\n}();","map":{"version":3,"sources":["C:/Users/New  Leaders Tech/Desktop/kumar-final-master/src/stores/quizStore.js"],"names":["makeAutoObservable","questionsList","QuizStore","rootStore","questionStore","currentSelection","currentQuestion","showAnswer","state","selectedanswer","getRandomQuestion","selection","console","log","Answers","map","val","i","dd","index","answer","length","option"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,OAAOC,aAAP;AAEA,WAAaC,SAAb;AAUI,qBAAYC,SAAZ,EAAuBC,aAAvB,EAAsC;AAAA;;AAAA,SARtCC,gBAQsC,GARnB,EAQmB;AAAA,SAPtCC,eAOsC,GAPpB,IAOoB;AAAA,SANtCC,UAMsC,GANzB,KAMyB;AAAA,SAJtCC,KAIsC,GAJ9B;AACJC,MAAAA,cAAc,EAAE;AADZ,KAI8B;AAClCT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAEA,SAAKG,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,eAAL,GAAuBF,aAAa,CAACM,iBAAd,EAAvB;AACH;;AAhBL;AAAA;AAAA,WAkBI,yBAAgBC,SAAhB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,gBAAjB;AACA,WAAKA,gBAAL,GAAwBM,SAAxB;AACH;AAtBL;AAAA;AAAA,WAwBI,oBAAWA,SAAX,EAAsB;AAClB,aAAO,KAAKN,gBAAL,IAAyBM,SAAhC;AACH;AA1BL;AAAA;AAAA,WA4BI,wBAAe;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAhB;AACAb,MAAAA,aAAa,CAACc,GAAd,CAAkB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAC1BH,QAAAA,OAAO,CAACC,GAAR,CAAY,UAACG,EAAD,EAAKC,KAAL,EAAe;AACvB,cAAIH,GAAG,CAACI,MAAJ,CAAWC,MAAX,KAAsBH,EAAE,CAACC,KAAD,CAA5B,EAAqC;AACjCP,YAAAA,OAAO,CAACC,GAAR,CAAYK,EAAE,CAACC,KAAD,CAAd;AAEH;AACJ,SALD;AAOH,OARD;AAaA,WAAKZ,UAAL,GAAkB,IAAlB;AAIH;AAhDL;AAAA;AAAA,WAmDI,yBAAgBe,MAAhB,EAAwB;AACpB,aAAO,KAAKhB,eAAL,CAAqBc,MAArB,IAA+BE,MAAtC;AACH;AArDL;;AAAA;AAAA","sourcesContent":["import { makeAutoObservable } from \"mobx\"\nimport questionsList from \"../models/questionsList\";\n\nexport class QuizStore {\n    questionStore;\n    currentSelection = '';\n    currentQuestion = null;\n    showAnswer = false;\n\n    state = {\n        selectedanswer: \"\",\n\n    }\n    constructor(rootStore, questionStore) {\n        makeAutoObservable(this);\n\n        this.rootStore = rootStore;\n        this.questionStore = questionStore;\n        this.currentQuestion = questionStore.getRandomQuestion();\n    }\n\n    changeSelection(selection) {\n        console.log(selection)\n        console.log(this.currentSelection)\n        this.currentSelection = selection\n    }\n\n    isSelected(selection) {\n        return this.currentSelection == selection\n    }\n\n    submitAnswer() {\n        console.log('submit');\n        const Answers = [1, 2, 1, 3, 3]\n        questionsList.map((val, i) => {\n            Answers.map((dd, index) => {\n                if (val.answer.length === dd[index]) {\n                    console.log(dd[index\n                    ])\n                }\n            })\n\n        })\n        // this.state({\n        //     selectedanswer: val.answer\n        // })\n\n        this.showAnswer = true;\n        // setTimeout(() => {\n        //     location.reload();\n        // }, 2000);\n    }\n\n\n    isOptionCorrect(option) {\n        return this.currentQuestion.answer == option\n    }\n\n}"]},"metadata":{},"sourceType":"module"}