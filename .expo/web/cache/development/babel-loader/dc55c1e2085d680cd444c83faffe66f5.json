{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { makeAutoObservable } from \"mobx\";\nimport questionsList from \"../models/questionsList\";\nexport var QuizStore = function () {\n  function QuizStore(rootStore, questionStore) {\n    _classCallCheck(this, QuizStore);\n\n    this.currentSelection = '';\n    this.currentQuestion = null;\n    this.showAnswer = false;\n    this.score = window.localStorage.getItem('score');\n    makeAutoObservable(this);\n    this.rootStore = rootStore;\n    this.questionStore = questionStore;\n    this.currentQuestion = questionStore.getRandomQuestion();\n  }\n\n  _createClass(QuizStore, [{\n    key: \"changeSelection\",\n    value: function changeSelection(selection) {\n      console.log(selection);\n      console.log(this.currentSelection);\n      this.currentSelection = selection;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(selection) {\n      return this.currentSelection == selection;\n    }\n  }, {\n    key: \"submitAnswer\",\n    value: function submitAnswer(option) {\n      var _this = this;\n\n      setTimeout(function () {\n        if (_this.currentQuestion.answer === option) {\n          console.log(\"correct\");\n          _this.showAnswer = true;\n          var newScore = Number(_this.score);\n          window.localStorage.setItem('score', newScore + 1);\n        } else {\n          alert(\"You are wrong\");\n          console.log(\"incorrect\");\n        }\n\n        console.log(_this.score);\n      });\n      location.reload();\n    }\n  }, {\n    key: \"isOptionCorrect\",\n    value: function isOptionCorrect(option) {\n      return this.currentQuestion.answer == option;\n    }\n  }]);\n\n  return QuizStore;\n}();","map":{"version":3,"sources":["C:/Users/New  Leaders Tech/Desktop/kumar-final-master/src/stores/quizStore.js"],"names":["makeAutoObservable","questionsList","QuizStore","rootStore","questionStore","currentSelection","currentQuestion","showAnswer","score","window","localStorage","getItem","getRandomQuestion","selection","console","log","option","setTimeout","answer","newScore","Number","setItem","alert","location","reload"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,OAAOC,aAAP;AAEA,WAAaC,SAAb;AAQI,qBAAYC,SAAZ,EAAuBC,aAAvB,EAAsC;AAAA;;AAAA,SANtCC,gBAMsC,GANnB,EAMmB;AAAA,SALtCC,eAKsC,GALpB,IAKoB;AAAA,SAJtCC,UAIsC,GAJzB,KAIyB;AAAA,SAFtCC,KAEsC,GAF9BC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAE8B;AAClCX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAEA,SAAKG,SAAL,GAAiBA,SAAjB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,eAAL,GAAuBF,aAAa,CAACQ,iBAAd,EAAvB;AACH;;AAdL;AAAA;AAAA,WAgBI,yBAAgBC,SAAhB,EAA2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,gBAAjB;AACA,WAAKA,gBAAL,GAAwBQ,SAAxB;AACH;AApBL;AAAA;AAAA,WAsBI,oBAAWA,SAAX,EAAsB;AAClB,aAAO,KAAKR,gBAAL,IAAyBQ,SAAhC;AACH;AAxBL;AAAA;AAAA,WA0BI,sBAAaG,MAAb,EAAqB;AAAA;;AAIjBC,MAAAA,UAAU,CAAC,YAAM;AACb,YAAI,KAAI,CAACX,eAAL,CAAqBY,MAArB,KAAgCF,MAApC,EAA4C;AACxCF,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAA,KAAI,CAACR,UAAL,GAAkB,IAAlB;AACA,cAAMY,QAAQ,GAAGC,MAAM,CAAC,KAAI,CAACZ,KAAN,CAAvB;AAGAC,UAAAA,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4B,OAA5B,EAAqCF,QAAQ,GAAG,CAAhD;AAEH,SARD,MASK;AACDG,UAAAA,KAAK,CAAC,eAAD,CAAL;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AACDD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACP,KAAjB;AAEH,OAhBS,CAAV;AAiBAe,MAAAA,QAAQ,CAACC,MAAT;AAIH;AAnDL;AAAA;AAAA,WAuDI,yBAAgBR,MAAhB,EAAwB;AACpB,aAAO,KAAKV,eAAL,CAAqBY,MAArB,IAA+BF,MAAtC;AACH;AAzDL;;AAAA;AAAA","sourcesContent":["import { makeAutoObservable } from \"mobx\"\nimport questionsList from \"../models/questionsList\";\n\nexport class QuizStore {\n    questionStore;\n    currentSelection = '';\n    currentQuestion = null;\n    showAnswer = false;\n\n    score = window.localStorage.getItem('score');\n\n    constructor(rootStore, questionStore) {\n        makeAutoObservable(this);\n\n        this.rootStore = rootStore;\n        this.questionStore = questionStore;\n        this.currentQuestion = questionStore.getRandomQuestion();\n    }\n\n    changeSelection(selection) {\n        console.log(selection)\n        console.log(this.currentSelection)\n        this.currentSelection = selection\n    }\n\n    isSelected(selection) {\n        return this.currentSelection == selection\n    }\n\n    submitAnswer(option) {\n\n\n\n        setTimeout(() => {\n            if (this.currentQuestion.answer === option) {\n                console.log(\"correct\")\n                this.showAnswer = true;\n                const newScore = Number(this.score)\n\n                // window.localStorage.clear()\n                window.localStorage.setItem('score', newScore + 1)\n\n            }\n            else {\n                alert(\"You are wrong\")\n                console.log(\"incorrect\")\n            }\n            console.log(this.score)\n\n        });\n        location.reload()\n\n\n\n    }\n\n\n\n    isOptionCorrect(option) {\n        return this.currentQuestion.answer == option\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}